# Node.js Express Web App to Linux on Azure
# Build a Node.js Express app and deploy it to Azure as a Linux web app.
# Add steps that analyze code, save build artifacts, deploy, and more:
# https://docs.microsoft.com/azure/devops/pipelines/languages/javascript

trigger:
- main

variables:
  # Azure Resource Manager connection created during pipeline creation
  azureSubscription: '6001685e-2c0d-4d57-b07f-e198dfce3799'

  # Web app name
  webAppName: 'App-nextjs-boilerplate-container-arm'

  # Container
  containerRepository: 'nextjscoilerplatecontainer.azurecr.io'
  imageRepository: 'nextjsboilerplate-arm'
  dockerRegistryServiceConnection: 'nextjs-container-registry'
  tagLatest: 'latest'

  # Environment name
  environmentName: 'App-nextjs-boilerplate-arm'

  # Agent VM image name
  vmImageName: 'ubuntu-latest'

  # Is running on main branch
  isMain: $[eq(variables['Build.SourceBranch'], 'refs/heads/main')]

  sourceSlot: 'staging'
  resourceGroup: 'nextjs-boilerplate-arm'

stages:
- stage: Build & Test
  displayName: Build stage
  jobs:
  - job: Build
    displayName: Build
    pool:
      vmImage: $(vmImageName)

    steps:
    - task: NodeTool@0
      inputs:
        versionSpec: '10.x'
      displayName: 'Install Node.js'

- stage: Dockerize
  displayName: Dockerize
  jobs:
  - job: Build & push container
    - task: Docker@2
      displayName: Build and push an image to container registry
      inputs:
        command: buildAndPush
        repository: $(imageRepository)
        containerRegistry: $(dockerRegistryServiceConnection)
        tags: |
          $(tagLatest)
          $(Build.BuildNumber)
    - job: Deploy new container
      - task: AzureWebAppContainer@1
        displayName: 'Dev deploy'
        inputs:
          azureSubscription: $(azureSubscription)
          appName: $(webAppName)
          imageName: $(containerRepository)/$(imageRepository):$(tagLatest)

#- stage: Deploy
#  displayName: Deploy stage
#  dependsOn: Build
#  condition: and(succeeded(), eq(variables.isMain, true))
#  jobs:
#  - deployment: Deploy
#    displayName: Deploy
#    environment: $(environmentName)
#    pool:
#      vmImage: $(vmImageName)
#    strategy:
#      runOnce:
#        deploy:
#          steps:
#          - task: AzureWebApp@1
#            displayName: 'Azure Web App Deploy: nextjs-deployment-example'
#            inputs:
#              azureSubscription: $(azureSubscription)
#              appType: webAppLinux
#              appName: $(webAppName)
#              runtimeStack: 'NODE|14-lts'
#              package: $(Pipeline.Workspace)/drop/$(Build.BuildId).zip
#              startUpCommand: 'npm run start'
#              slotName: $(sourceSlot)
#
#          - task: AzureAppServiceManage@0
#            displayName: 'Swap Slots'
#            inputs:
#              azureSubscription: $(azureSubscription)
#              Action: 'Swap Slots'
#              WebAppName: $(webAppName)
#              ResourceGroupName: $(resourceGroup)
#              SourceSlot: $(sourceSlot)
